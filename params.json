{"name":"Embark","tagline":"Easy to use document database for agile projects with a code-first focus.","body":"# embark\r\nEasy to use document database with only a few commands, so that you don't have to learn a whole new framework to get going. Embark allows you to defer the plumbing or commitment of choosing a specific database technology before getting things done. Ideal for prototyping or projects with an agile code-first approach.\r\n\r\n##Visibility\r\n\r\nDocuments are saved in .txt files in folders for each collection so you can easily view/edit data while developing. The default serialization is Json, but you can also plug in some other format like YAML or DSON if you like.\r\n\r\n##Simplicity\r\n\r\n```csharp\r\n// arrange some guinea pig\r\nvar pet = new Sheep { Name = \"Fluffy\", FavouriteIceCream = IceCream.Vanilla };\r\n\r\n// save data locally\r\nvar db = Embark.Client.GetLocalDB(@\"C:\\AnimalsDB\\\"); /* Client.GetLocalDB() defaults to: Directory.GetCurrentDirectory() */\r\n\r\n// or over a network via REST API to WCF server *see usage section below*\r\nvar io = Embark.Client.GetNetworkDB(\"192.168.1.24\", 8080);\r\n\r\n// collections created on-the-fly if needed\r\nvar io = db[\"sheep\"];\r\n\r\n// insert\r\nlong id = io.Insert(pet);\r\n\r\n// get\r\nSheep fluffy = io.Select<Sheep>(id);\r\n\r\n// update\r\nfluffy.FavouriteIceCream = IceCream.Strawberry;\r\nbool fluffyNowLikesStrawberry = io.Update(id, fluffy);\r\n\r\n// delete\r\nbool hasSheepVanished = io.Delete(id);\r\n```\r\n###All the commands are\r\n\r\n####basic:\r\n- Insert(object) returns Int64 ID\r\n- Select(id) returns document\r\n- Update(id, object) returns bool successful\r\n- Delete(id) returns bool successful\r\n\r\n####range:\r\n- SelectLike(new { Name = \"Rocket\"})\r\n- SelectAll()\r\n\r\n####other:\r\n- byte[] GetByteArray(object blob) to help with blob deserialization\r\n\r\n####[in development](https://trello.com/b/rtqlPmrM/development):\r\n- Document Wrapper with ID & timestamp\r\n- SelectBetween(new { Score = 15}, new { Score = 39.21})\r\n- GetCollection< T >(\"name\")\r\n- CountAll()\r\n\r\n**That's it!**\r\n\r\nThe intent of embark is to stay clean, simple and minimal.. with a complete source code download of under 50 kilobytes, and no external dependencies other than the .NET framework.\r\n\r\nExtra features like database replication, backup, user rights, security, etc.. and to be a general end-all solution, is not the aim of this project. By dodging increasing complexity from scope-creep, the core embark itself will remain crisp and friendly :)\r\n\r\n##Usage\r\n\r\nYou can add the [Embark NuGet package](https://www.nuget.org/packages/Embark/), copy paste the sample code and then simply continue developing right away.\r\n\r\nIf you want to save data over a network then download and run the server from [here](http://example.todo/). If you prefer to know the running code, feel free to download and compile - it will only take a minute. \r\nNOTE either run the server in admin mode or [allow your server app to use the your-machine:port/embark/ uri ](http://stackoverflow.com/a/17242260/4650900)\r\n\r\nTo check out current developments go to [embarkdb on trello](https://trello.com/b/rtqlPmrM/development) & please feel free to contact me @ ubrgw@users.noreply.github.com with any feedback, suggestions or to get involved!\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}