{"name":"Embark","tagline":"Easy to use document database for agile projects with a code-first focus.","body":"# embark\r\nEasy to use document database with a focus on visibility and simplicity. Made for prototyping or projects with an agile code-first approach, Embark allows you to [defer the plumbing or commitment of choosing a specific database technology](https://www.youtube.com/watch?v=asLUTiJJqdE).\r\n\r\n##Visibility\r\n\r\nDocuments are saved in .txt files in folders for each collection so you can easily view/edit data while developing. The default serialization is [JSON](http://en.wikipedia.org/wiki/JSON#Data_types.2C_syntax_and_example), and you can also plug in some other format like [YAML](http://www.yaml.org/start.html) or even [DSON](http://dogeon.org/).\r\n\r\n##Simplicity\r\n\r\n```csharp\r\n// arrange some guinea pig\r\nvar pet = new Sheep { Name = \"Fluffy\", FavouriteIceCream = IceCream.Vanilla };\r\n\r\n// save data locally\r\nvar db = Embark.Client.GetLocalDB(@\"C:\\AnimalsDB\\\");\r\n\r\n// or over a network via REST API to WCF server *see usage section below*\r\nvar db = Embark.Client.GetNetworkDB(\"192.168.1.24\", 8080);\r\n\r\n// collections created on-the-fly if needed\r\nvar io = db.GetCollection<Sheep>(\"sheep\");\r\n\r\n// insert\r\nlong id = io.Insert(pet);\r\n\r\n// get\r\nSheep fluffy = io.Select(id);\r\n\r\n// update\r\nfluffy.FavouriteIceCream = IceCream.Strawberry;\r\nbool fluffyNowLikesStrawberry = io.Update(id, fluffy);\r\n\r\n// delete\r\nbool hasSheepVanished = io.Delete(id);\r\n\r\n// non-type specific if you want to mix Apples & Oranges objects in the same collection\r\nvar io = db[\"fruit\"];\r\n```\r\n###All the commands are\r\n\r\n####basic:\r\n- Insert(object) returns Int64 ID\r\n- Select(id) returns document\r\n- Update(id, object) returns bool successful\r\n- Delete(id) returns bool successful\r\n\r\n####range:\r\n- SelectLike(new { Name = \"Rocket\"})\r\n- SelectBetween(new { Score = 15}, new { Score = 39.21})\r\n- SelectAll() returns Document Wrapper with ID & timestamp\r\n\r\n####other:\r\n- byte[] GetByteArray(object blob) to help with blob deserialization\r\n\r\n####[in development](https://trello.com/b/rtqlPmrM/development):\r\n- Aggregate functions (Count/Average/Min/Max..)\r\n- More/better feedback from server\r\n- Review & Simplify code\r\n\r\n###That's it!###\r\n\r\nThe intent of embark is to stay simple to use and minimal.\r\nJust one .dll under 50 kilobytes and no external dependencies other than the .NET framework. \r\n\r\nThe aim of the project is to provide a DB while you are building new ideas and not to weigh features that do not contribute to prototyping like database replication, query optimizations, optimal disk usage, etc...\r\nBy avoiding increasing complexity from scope-creep, Embark will remain crisp and friendly :)\r\n\r\n##Usage\r\n\r\nYou can add the [Embark NuGet package](https://www.nuget.org/packages/Embark/), copy paste the sample code and then happily just continue developing.\r\n\r\nIf you want to save data over a network:\r\n```csharp\r\n// start a new server\r\nvar server = new Embark.Server();\r\nserver.Start();\r\n```\r\nor you can download a simple server from [here](https://trello-attachments.s3.amazonaws.com/54f89f538ec1e186a911c534/5527fc8a8a55d94cbed0ab17/c3e0c011826d1fe4519a46f07e46b97e/BasicServer.zip). \r\n> *NOTE: For the WCF server to work, either run it in admin mode or give access rights to the [your-machine:port/embark/](http://stackoverflow.com/a/17242260/4650900) namespace.*\r\n\r\n##Development\r\n\r\nCheck out current developments @ [embarkDB on trello](https://trello.com/b/rtqlPmrM/development).\r\n\r\nFeel free to contact embarkDB@gmail.com with any feedback, suggestions or to get involved!\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}