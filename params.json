{"name":"Embark","tagline":"Easy to use document database for agile projects with a code-first focus.","body":"#Idea\r\nEasy to use document database with a focus on visibility and simplicity. Made for prototyping or projects with an agile code-first approach. Embark allows you to [defer the plumbing or commitment of choosing a specific database technology](https://www.youtube.com/watch?v=asLUTiJJqdE).\r\n\r\n##Visibility\r\n\r\nDocuments are saved as [JSON](http://en.wikipedia.org/wiki/JSON#Data_types.2C_syntax_and_example) text files in folders for each collection, so you can easily view/edit data while developing.\r\n\r\n![Documents saved as text files](https://trello-attachments.s3.amazonaws.com/54f89e2e643f7e862d27cf6b/551x192/386d7e8b7a80eb55380f4b733d0e8ca6/explore.png \"Documents saved as text files\")\r\n\r\n##Simplicity\r\n\r\n```csharp\r\n// arrange some guinea pig\r\nvar pet = new Sheep { Name = \"Fluffy\", FavouriteIceCream = IceCream.Vanilla };\r\n\r\n// save data locally\r\nvar db = Embark.Client.GetLocalDB(@\"C:\\AnimalsDB\\\");\r\n\r\n// or over a network via REST API to WCF server *see usage section below*\r\nvar db = Embark.Client.GetNetworkDB(\"192.168.1.24\", 8080);\r\n\r\n// collections created on-the-fly if needed\r\nvar io = db.GetCollection<Sheep>(\"sheep\");\r\n\r\n// create\r\nlong id = io.Insert(pet);\r\n\r\n// read\r\nSheep fluffy = io.Get(id);\r\n\r\n// update\r\nfluffy.FavouriteIceCream = IceCream.Strawberry;\r\nbool fluffyNowLikesStrawberry = io.Update(id, fluffy);\r\n\r\n// delete\r\nbool hasSheepVanished = io.Delete(id);\r\n\r\n// non-type specific if you want to mix Apples & Oranges objects in the same collection\r\nvar io = db[\"fruit\"];\r\n```\r\n###Some other commands are\r\n\r\n- GetWhere(new { Name = \"Rocket\"})\r\n- GetBetween(new { Score = 15}, new { Score = 39.21})\r\n- GetAll() returns Document Wrapper with ID & timestamp\r\n- byte[] GetByteArray(object blob) to help with blob deserialization\r\n- See the [wiki for details](https://github.com/ubrgw/embark/wiki/SQL-Equivalents)\r\n\r\n##That's it!\r\n\r\nThe intent of Embark is to stay simple to use and minimal.\r\nA single .dll under 50 kilobytes and no external dependencies other than the .NET framework. \r\nBy avoiding increasing complexity from scope-creep, Embark will remain crisp and friendly :)\r\n\r\nThe aim of the project is to provide a DB [while you are building new ideas](https://github.com/ubrgw/embark/wiki) and not to weigh features that do not contribute to prototyping like database replication, query optimizations, optimal disk usage, etc..\r\n\r\n![alt text](https://trello-attachments.s3.amazonaws.com/54f89e2e643f7e862d27cf6b/675x592/ed7a589d1d7470a4eaaa8ded3dfa699c/iterativeB.png \"Stepping stone development\")\r\n\r\n##Usage\r\n\r\nYou can add the [Embark NuGet package](https://www.nuget.org/packages/Embark/), copy paste the sample code, and just continue developing.\r\n\r\nIf you want to save data over a network:\r\n```csharp\r\n// start a new server\r\nvar server = new Embark.Server();\r\nserver.Start();\r\n```\r\nor you can download a simple server from [here](https://trello-attachments.s3.amazonaws.com/54f89f538ec1e186a911c534/5527fc8a8a55d94cbed0ab17/a329633e001aae8b8b8deac9fcc2f98b/EmbarkDemo.zip). \r\n> *NOTE: For the WCF server to work, either run it in admin mode or give access rights to the [your-machine:port/embark/](http://stackoverflow.com/a/17242260/4650900) namespace.*\r\n\r\n##[In development:](https://trello.com/b/rtqlPmrM/development)\r\n- Custom text-to-object mapping, like [YAML](http://www.yaml.org/start.html) or even [DSON](http://dogeon.org/)\r\n- Optional convention based collection\r\n- Optional caching & async data persistency\r\n- Review & Simplify code\r\n\r\nCheck out [Embark kanban on trello](https://trello.com/b/rtqlPmrM/development).\r\n\r\nFeel free to contact EmbarkDB@gmail.com with any feedback, suggestions or to get involved!\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}